const { Stack } = require('../_utils/stack');


/**
 * stack: @see ./README.md for details
 * @param {string}    s     the string to search
 * @return {number}         length of the max valid parentheses
 */
const longestValidParentheses1 = function(s) {
  let max = 0;
  const stack = new Stack();
  stack.push(-1);
  for (let i = 0; i < s.length; i++) {
    if (s.charAt(i) === '(') {
      stack.push(i);
    } else {
      stack.pop();
      if (stack.empty()) {
        stack.push(i);
      } else {
        const length = i - stack.peek();
        max = max > length ? max : length;
      }
    }
  }
  return max;
};


/**
 * dynamic programming: @see ./README.md for details
 * @param {string}    s     the string to search
 * @return {number}         length of the max valid parentheses
 */
const longestValidParentheses2 = function(s) {
  let max = 0;
  const dp = Array(s.length).fill(0);
  for (let i = 0; i < s.length; i++) {
    if (s.charAt(i) === ')') {
      if (s.charAt(i - 1) === '(') {
        dp[i] = (i >= 2 ? dp[i - 2] : 0) + 2;
      } else if (i - dp[i - 1] > 0 && s.charAt(i - dp[i - 1] - 1) === '(') {
        dp[i] = dp[i - 1] + (i - dp[i - 1] >= 2 ? dp[i - dp[i - 1] - 2] : 0) + 2;
      }
      max = max > dp[i] ? max : dp[i];
    }
  }
  return max;
};


/**
 * bi-directional count without extra space: @see ./README.md for details
 * @param {string}    s     the string to search
 * @return {number}         length of the max valid parentheses
 */
const longestValidParentheses = function(s) {
  let max = 0;
  // count from left to right
  let open = 0;   // how many '('
  let close = 0;  // how many ')'
  for (let i = 0; i < s.length; i++) {
    if (s.charAt(i) === '(') {
      open ++;
    } else {
      close ++;
    }
    if (open === close) {
      max = max > open + close ? max : open + close;
    } else if (close > open) {
      open = 0;
      close = 0;
    }
  }

  // count from right to left
  open = 0;
  close = 0;
  for (let i = s.length - 1; i >= 0; i--) {
    if (s.charAt(i) === '(') {
      open ++;
    } else {
      close ++;
    }
    if (open === close) {
      max = max > open + close ? max : open + close;
    } else if (open > close) {
      open = 0;
      close = 0;
    }
  }
  return max;
};


/**
 * main function
 * @param {function}  callback    the callback function
 */
const main = (callback) => {
  console.log('Task 0032 - Longest Valid Parentheses:');
  [
    '(()',
    ')()())',
    '()(())',
    '(())()(()((',
    ')(((((()())()()))()(()))(',
    '((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((' +
    '((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((' +
    '((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((' +
    '((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((' +
    '((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((' +
    '((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((' +
    '((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((' +
    '((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((' +
    '((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((' +
    '((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((' +
    '((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((' +
    '((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((' +
    '((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((' +
    '((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((' +
    '((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((' +
    '((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((' +
    '((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((' +
    '((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((' +
    '((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((' +
    '((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((' +
    '((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((' +
    '((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((' +
    '((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((' +
    '((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((' +
    '((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((' +
    '((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((' +
    '((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((' +
    '((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((' +
    '((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((' +
    '((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((' +
    '((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((' +
    '((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((' +
    '((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((' +
    '((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((' +
    '((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((' +
    '((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((' +
    '((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((' +
    '((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((' +
    '((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((' +
    '((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((' +
    '((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((' +
    '((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((' +
    '((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((' +
    '((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((' +
    '((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((' +
    '((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((' +
    '((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((' +
    '((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((' +
    '((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((' +
    '((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((' +
    '((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((' +
    '((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((' +
    '((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((' +
    '((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((' +
    '((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((' +
    '((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((' +
    '((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((' +
    '((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((' +
    '((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((' +
    '((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((' +
    '((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((' +
    '((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((' +
    '((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((' +
    '((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((' +
    '((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((' +
    '((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((' +
    '((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((' +
    '((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((' +
    '((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((' +
    '((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((' +
    '((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((' +
    '((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((' +
    '((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((' +
    '((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((' +
    '((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((' +
    '((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((' +
    '((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((' +
    '((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((' +
    '((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((' +
    '((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((' +
    '((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((' +
    '((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((' +
    '((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((' +
    '((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((' +
    '((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((' +
    '((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((' +
    '((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((' +
    '((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((' +
    '((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((' +
    '((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((' +
    '((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((' +
    '((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((' +
    '((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((' +
    '((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((' +
    '((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((' +
    '((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((' +
    '((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((' +
    '((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((' +
    '((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((' +
    '((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((' +
    '((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((' +
    '((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((' +
    '((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((' +
    '((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((' +
    '((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((' +
    '((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((' +
    '((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((' +
    '((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((' +
    '((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((' +
    '((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((' +
    '((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((' +
    '((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((' +
    '((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((' +
    '((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((' +
    '((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((' +
    '((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((' +
    '((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((' +
    '((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((' +
    '((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((' +
    '((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((' +
    '((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((' +
    '((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((' +
    '((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((' +
    '((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((' +
    '((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((' +
    '((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((' +
    '((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((' +
    '((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((' +
    '((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((' +
    '((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((' +
    '((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((' +
    '((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((' +
    '((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((' +
    '((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((' +
    '((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((' +
    '((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((' +
    '((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((' +
    '((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((' +
    '(((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((()())))((' +
    '))()())((((()())((())))((()))()())))()(()()()(()((()))()()()))()()()(()(' +
    ')((((())()(((()(((())((()))()((()(()))()())))))))))())()())(()()))((()()' +
    '()()())))((()()((((()()))))(())())()()))))(())()(()))((((((()))(()()()()' +
    '(())(()((()))(()(())(((()()))(()((((()((((()((((())(())))()(())))()))(()' +
    '((((((((())()()((())((()())()))))())())()(((((()()(((((())()((()(((()))(' +
    '()(()))(()(()())))())(()((((()((()(((((()()))((()(()((())()))))(()(()())' +
    '((()((()((((())))(()())()))()())())()))))(())))(())()((())(()(()))))()()' +
    ')(((()(()(((((((((()(()()())))((()((()())())())(((((()(()))))()))()))))(' +
    ')())()(()(())))(()))))(()))(((()))))())))))(((())((())((((()((()))((()))' +
    ')()))(((()))())()))()()()((()()(()())(()))()()((()())))))())(()())(((())' +
    '))))())(())()))()())())(()(()((())((()(()((())(()()()(()((()(((()(())()(' +
    '((())))))()())))))(()((((()(()()))(((())(()))(()()))))(())()((()))()))()' +
    '()))()((())(()())())())(()))(()()(())()(()((((()())(((())(()()())())(()(' +
    ')))())))(()((())(()()))))(()))((()()((((()())(()()))()())()())))()(()(((' +
    '(())())()(())()))()()(()(()))))))(((()()((()))(()((((()()((())))())())))' +
    '()())))())))((())()()()))()((()((()))()()())))(())())(()(()(()(()))())()' +
    '))(())((())()())(((()()(((())(()()))(()())(())))()))(((()()()())))())))(' +
    '((()))())())())))(((()))()())())())))))()()()()(())))(()())))(()()())))(' +
    ')((((()()()((((()))()())))(()))()))))(()())()))(((((())()((())()))(()())' +
    '()()()())()(((()(()(())))))(()(((()()))((((()()))()))(((())(()(()))()(()' +
    ')))()()(()))))()))))()())))()))((((((((()()())((()(()()()(((())())())))(' +
    ')()(())(())))()())()())))((()))((((())()()))(())(((())(()()(((((()()((()' +
    '()(((()(()()(((())()))))()(()())(()((((()()())(((()))(())((())()))))()))' +
    ')))(()()()())))()))(())((()())()())()()))(())))((()))()()((()())()()))((' +
    ')()(())()())(())))((()(((())))()))))((((()))((())())())()(())(()))((((((' +
    '())()()(((((()))()())(((()(()(())()((()())))(((())(()(())))))(()(()(((()' +
    '))(())((((())))((())((((((((()(((((()(())))((((((())(()((((()(())()()(((' +
    '))())())((((((((()))))(((())()))()()))(())(())()()())(()()((())(()))())(' +
    '((())(()((())(())(())))))(()(()(()()(((()()()))())(()))(())())()(((()(((' +
    '))((()())()(((((()()(()))))(((())()()))(()(()(()(()((())))))))(())())())' +
    ')()(()(()))))()()((((())()())(((())(()))((()())(()((())()()(())((((())))' +
    '))(())())())(())(()()(()()))(((()((((())(((())))))(()()()()(((()((((())(' +
    '()))((())()))()(((((((()(()())))((()()(()()((())()))()(())))((()()((((()' +
    '()()))((())()))((())(((()(()()()(((()((())((())()())())))((()))))))))))(' +
    '())()()(((()()())))(((()))(()))))(((()(()())(()))(())((()))(((()(()()(((' +
    '((((()())((((()))((((()(()())())()(((()(()((()))))))))))()()(((()()(((((' +
    '(((((())))))((((())())((()(((()())()))()()(((((())(()())())(((()((())(((' +
    '(((())(((())(((()(()(((((((()(())()())(()))))(()(((()))))))()))(((())))(' +
    '()(()())()))(()()(()(()((()())()(())((()()((()()()(()(()()))(((((())()((' +
    ')())()((()())()))(((((()((())()((()((((()(((())())(()()(())()(())(()(())' +
    '))))(()())((()((()()()())(()))(()))))))(()((())(())((())()())()()))(()((' +
    '()))(()()))()())(())(()()(()))((())()((())((((((())()(()()(((((())(()())' +
    '())())()()(()())))))()))()((())((((((()())((()))))))((()(()()(((((((()))' +
    ')))))((()))(())(((()(()(())()()()()(()(())()))))))())()))()(((((()(())((' +
    '(()))((()))()))()()(()(()((())(()))))()())((()())))))))(()()(()()))()(((' +
    ')(())()((())(()()))())((()())())()()))))((((()()()))())(())()())))()))()' +
    '))))()))((()(()())()))()))(((()()()()())))())()))((()()())((()())))(((()' +
    '((()()())(())))()(())(()(()(())(()(((((()()()(((())()())(()((()())(()(((' +
    '()(())((((()())()(())))(((((((()))))())())))(()))()()(((()())(()))()())(' +
    '())()))()((())()((())((()((())()())(()()))(((((()()()((((((((()(()((()()' +
    '((((((()())))((((((())))())(()(()((((()(()())())()()))()((())())(()(((((' +
    ')(((()())((())))))(()())(()()()(()))()())()()))((()((()())(())()()()((()' +
    ')()()))))())()))())))(()))(()))()))((())()((()((()))))))())(((()))))))()' +
    '(((()((())))((()())())()))((()(()(()(()))((()()))())))(()())))())(()))((' +
    '))(())))))()(())(()()))()))((())))(()))(()))))(())()())(()(()))())(()(()' +
    ')(())))(()))())(()())))())(()())((()))()()((()(()()()(((((()((()((())(()' +
    '())(())))()))))))(((())())))()((((()))()((()))())()))()))(()(()((()()())' +
    '()()(((()))())))))()((((()()))))()))())))()())))(((((()(())))())(((()))(' +
    '(()))(((()(())())()((()(((()))()())))))((((()))()(()((((((()(()()()())((' +
    '))((()))()(()()))))))()(((())))(())()())))))((()))(())()))))(()(((()()((' +
    '())(()))))(((((()))))())))()(())(()(()))()))()))(()((())(()((()())()((((' +
    ')))))())(())()(())))((())(()(((()))(((((()))(()))())))(()((((((())()((((' +
    '())())()))((())))))())(()(())())))))()()(((())()())))))()))()())))()(())' +
    '())(())()()()(((())))(())(((()))(()(((()()))())((()))(((()()()()())()())' +
    ')(()))))()()))))(((()()))))()()(()()))()()()())())()((())(((()())(((())(' +
    '()((()(((()(()())()()()(()((())(()()(()()()))))))()((()))))()(()))()))((' +
    '))()()())))()()(((()))((()()(((()())))((()()())((())))))()())()((())))()' +
    ')(()())()()()()((())((()()())((()()))())(())())()(()(((()))())(()))))(()' +
    '()))(())))))))()())()((()())()()))()())))((()()(()())()(()))((())()))(((' +
    '())))())))(((()()())())(',
  ].forEach( str => {
    console.log(`  str="${str.substr(0, 30)}${str.length>30?'...':''}", max=${longestValidParentheses(str)}`);
  });
  if (callback) {
    callback();
  }
};


module.exports = main;
